package constant

var (
	ETH_PUBLIC_KEY          = "ETH_PUBLIC_KEY"
	ETH_PENDING_TRANSACTION = "ETH_PENDING_TRANSACTION"
	ETH_LATEST_BLOCK        = "ETH_LATEST_BLOCK"
	ETH_SWEEP_BLOCK         = "ETH_SWEEP_BLOCK"
	ETH_CACHE_BLOCK         = "ETH_CACHE_BLOCK"
	ETH_PENDING_BLOCK       = "ETH_PENDING_BLOCK"
)

var (
	ETH_SEPOLIA_PUBLIC_KEY          = "ETH_SEPOLIA_PUBLIC_KEY"
	ETH_SEPOLIA_PENDING_TRANSACTION = "ETH_SEPOLIA_PENDING_TRANSACTION"
	ETH_SEPOLIA_LATEST_BLOCK        = "ETH_SEPOLIA_LATEST_BLOCK"
	ETH_SEPOLIA_SWEEP_BLOCK         = "ETH_SEPOLIA_SWEEP_BLOCK"
	ETH_SEPOLIA_CACHE_BLOCK         = "ETH_SEPOLIA_CACHE_BLOCK"
	ETH_SEPOLIA_PENDING_BLOCK       = "ETH_SEPOLIA_PENDING_BLOCK"
)

var (
	BTC_PUBLIC_KEY          = "BTC_PUBLIC_KEY"
	BTC_PENDING_TRANSACTION = "BTC_PENDING_TRANSACTION"
	BTC_LATEST_BLOCK        = "BTC_LATEST_BLOCK"
	BTC_SWEEP_BLOCK         = "BTC_SWEEP_BLOCK"
	BTC_CACHE_BLOCK         = "BTC_CACHE_BLOCK"
	BTC_PENDING_BLOCK       = "BTC_PENDING_BLOCK"
)

var (
	BTC_TESTNET_PUBLIC_KEY          = "BTC_TESTNET_PUBLIC_KEY"
	BTC_TESTNET_PENDING_TRANSACTION = "BTC_TESTNET_PENDING_TRANSACTION"
	BTC_TESTNET_LATEST_BLOCK        = "BTC_TESTNET_LATEST_BLOCK"
	BTC_TESTNET_SWEEP_BLOCK         = "BTC_TESTNET_SWEEP_BLOCK"
	BTC_TESTNET_CACHE_BLOCK         = "BTC_TESTNET_CACHE_BLOCK"
	BTC_TESTNET_PENDING_BLOCK       = "BTC_TESTNET_PENDING_BLOCK"
)

var (
	TRON_PUBLIC_KEY          = "TRON_PUBLIC_KEY"
	TRON_PENDING_TRANSACTION = "TRON_PENDING_TRANSACTION"
	TRON_LATEST_BLOCK        = "TRON_LATEST_BLOCK"
	TRON_SWEEP_BLOCK         = "TRON_SWEEP_BLOCK"
	TRON_CACHE_BLOCK         = "TRON_CACHE_BLOCK"
	TRON_PENDING_BLOCK       = "TRON_PENDING_BLOCK"
)

var (
	TRON_NILE_PUBLIC_KEY          = "TRON_NILE_PUBLIC_KEY"
	TRON_NILE_PENDING_TRANSACTION = "TRON_NILE_PENDING_TRANSACTION"
	TRON_NILE_LATEST_BLOCK        = "TRON_NILE_LATEST_BLOCK"
	TRON_NILE_SWEEP_BLOCK         = "TRON_NILE_SWEEP_BLOCK"
	TRON_NILE_CACHE_BLOCK         = "TRON_NILE_CACHE_BLOCK"
	TRON_NILE_PENDING_BLOCK       = "TRON_NILE_PENDING_BLOCK"
)

var (
	BSC_PUBLIC_KEY          = "BSC_PUBLIC_KEY"
	BSC_PENDING_TRANSACTION = "BSC_PENDING_TRANSACTION"
	BSC_LATEST_BLOCK        = "BSC_LATEST_BLOCK"
	BSC_SWEEP_BLOCK         = "BSC_SWEEP_BLOCK"
	BSC_CACHE_BLOCK         = "BSC_CACHE_BLOCK"
	BSC_PENDING_BLOCK       = "BSC_PENDING_BLOCK"
)

var (
	BSC_TESTNET_PUBLIC_KEY          = "BSC_TESTNET_PUBLIC_KEY"
	BSC_TESTNET_PENDING_TRANSACTION = "BSC_TESTNET_PENDING_TRANSACTION"
	BSC_TESTNET_LATEST_BLOCK        = "BSC_TESTNET_LATEST_BLOCK"
	BSC_TESTNET_SWEEP_BLOCK         = "BSC_TESTNET_SWEEP_BLOCK"
	BSC_TESTNET_CACHE_BLOCK         = "BSC_TESTNET_CACHE_BLOCK"
	BSC_TESTNET_PENDING_BLOCK       = "BSC_TESTNET_PENDING_BLOCK"
)

var (
	ARBITRUM_ONE_PUBLIC_KEY          = "ARBITRUM_ONE_PUBLIC_KEY"
	ARBITRUM_ONE_PENDING_TRANSACTION = "ARBITRUM_ONE_PENDING_TRANSACTION"
	ARBITRUM_ONE_LATEST_BLOCK        = "ARBITRUM_ONE_LATEST_BLOCK"
	ARBITRUM_ONE_SWEEP_BLOCK         = "ARBITRUM_ONE_SWEEP_BLOCK"
	ARBITRUM_ONE_CACHE_BLOCK         = "ARBITRUM_ONE_CACHE_BLOCK"
	ARBITRUM_ONE_PENDING_BLOCK       = "ARBITRUM_ONE_PENDING_BLOCK"
)

var (
	ARBITRUM_NOVA_PUBLIC_KEY          = "ARBITRUM_NOVA_PUBLIC_KEY"
	ARBITRUM_NOVA_PENDING_TRANSACTION = "ARBITRUM_NOVA_PENDING_TRANSACTION"
	ARBITRUM_NOVA_LATEST_BLOCK        = "ARBITRUM_NOVA_LATEST_BLOCK"
	ARBITRUM_NOVA_SWEEP_BLOCK         = "ARBITRUM_NOVA_SWEEP_BLOCK"
	ARBITRUM_NOVA_CACHE_BLOCK         = "ARBITRUM_NOVA_CACHE_BLOCK"
	ARBITRUM_NOVA_PENDING_BLOCK       = "ARBITRUM_NOVA_PENDING_BLOCK"
)

var (
	ARBITRUM_SEPOLIA_PUBLIC_KEY          = "ARBITRUM_SEPOLIA_PUBLIC_KEY"
	ARBITRUM_SEPOLIA_PENDING_TRANSACTION = "ARBITRUM_SEPOLIA_PENDING_TRANSACTION"
	ARBITRUM_SEPOLIA_LATEST_BLOCK        = "ARBITRUM_SEPOLIA_LATEST_BLOCK"
	ARBITRUM_SEPOLIA_SWEEP_BLOCK         = "ARBITRUM_SEPOLIA_SWEEP_BLOCK"
	ARBITRUM_SEPOLIA_CACHE_BLOCK         = "ARBITRUM_SEPOLIA_CACHE_BLOCK"
	ARBITRUM_SEPOLIA_PENDING_BLOCK       = "ARBITRUM_SEPOLIA_PENDING_BLOCK"
)

var (
	LTC_PUBLIC_KEY          = "LTC_PUBLIC_KEY"
	LTC_PENDING_TRANSACTION = "LTC_PENDING_TRANSACTION"
	LTC_LATEST_BLOCK        = "LTC_LATEST_BLOCK"
	LTC_SWEEP_BLOCK         = "LTC_SWEEP_BLOCK"
	LTC_CACHE_BLOCK         = "LTC_CACHE_BLOCK"
	LTC_PENDING_BLOCK       = "LTC_PENDING_BLOCK"
)

var (
	LTC_TESTNET_PUBLIC_KEY          = "LTC_TESTNET_PUBLIC_KEY"
	LTC_TESTNET_PENDING_TRANSACTION = "LTC_TESTNET_PENDING_TRANSACTION"
	LTC_TESTNET_LATEST_BLOCK        = "LTC_TESTNET_LATEST_BLOCK"
	LTC_TESTNET_SWEEP_BLOCK         = "LTC_TESTNET_SWEEP_BLOCK"
	LTC_TESTNET_CACHE_BLOCK         = "LTC_TESTNET_CACHE_BLOCK"
	LTC_TESTNET_PENDING_BLOCK       = "LTC_TESTNET_PENDING_BLOCK"
)

var (
	OP_PUBLIC_KEY          = "OP_PUBLIC_KEY"
	OP_PENDING_TRANSACTION = "OP_PENDING_TRANSACTION"
	OP_LATEST_BLOCK        = "OP_LATEST_BLOCK"
	OP_SWEEP_BLOCK         = "OP_SWEEP_BLOCK"
	OP_CACHE_BLOCK         = "OP_CACHE_BLOCK"
	OP_PENDING_BLOCK       = "OP_PENDING_BLOCK"
)

var (
	OP_SEPOLIA_PUBLIC_KEY          = "OP_SEPOLIA_PUBLIC_KEY"
	OP_SEPOLIA_PENDING_TRANSACTION = "OP_SEPOLIA_PENDING_TRANSACTION"
	OP_SEPOLIA_LATEST_BLOCK        = "OP_SEPOLIA_LATEST_BLOCK"
	OP_SEPOLIA_SWEEP_BLOCK         = "OP_SEPOLIA_SWEEP_BLOCK"
	OP_SEPOLIA_CACHE_BLOCK         = "OP_SEPOLIA_CACHE_BLOCK"
	OP_SEPOLIA_PENDING_BLOCK       = "OP_SEPOLIA_PENDING_BLOCK"
)

var (
	SOL_PUBLIC_KEY          = "SOL_PUBLIC_KEY"
	SOL_PENDING_TRANSACTION = "SOL_PENDING_TRANSACTION"
	SOL_LATEST_BLOCK        = "SOL_LATEST_BLOCK"
	SOL_SWEEP_BLOCK         = "SOL_SWEEP_BLOCK"
	SOL_CACHE_BLOCK         = "SOL_CACHE_BLOCK"
	SOL_PENDING_BLOCK       = "SOL_PENDING_BLOCK"
)

var (
	SOL_DEVNET_PUBLIC_KEY          = "SOL_DEVNET_PUBLIC_KEY"
	SOL_DEVNET_PENDING_TRANSACTION = "SOL_DEVNET_PENDING_TRANSACTION"
	SOL_DEVNET_LATEST_BLOCK        = "SOL_DEVNET_LATEST_BLOCK"
	SOL_DEVNET_SWEEP_BLOCK         = "SOL_DEVNET_SWEEP_BLOCK"
	SOL_DEVNET_CACHE_BLOCK         = "SOL_DEVNET_CACHE_BLOCK"
	SOL_DEVNET_PENDING_BLOCK       = "SOL_DEVNET_PENDING_BLOCK"
)

var (
	TON_PUBLIC_KEY          = "TON_PUBLIC_KEY"
	TON_PENDING_TRANSACTION = "TON_PENDING_TRANSACTION"
	TON_LATEST_BLOCK        = "TON_LATEST_BLOCK"
	TON_SWEEP_BLOCK         = "TON_SWEEP_BLOCK"
	TON_CACHE_BLOCK         = "TON_CACHE_BLOCK"
	TON_PENDING_BLOCK       = "TON_PENDING_BLOCK"
)

var (
	TON_TESTNET_PUBLIC_KEY          = "TON_TESTNET_PUBLIC_KEY"
	TON_TESTNET_PENDING_TRANSACTION = "TON_TESTNET_PENDING_TRANSACTION"
	TON_TESTNET_LATEST_BLOCK        = "TON_TESTNET_LATEST_BLOCK"
	TON_TESTNET_SWEEP_BLOCK         = "TON_TESTNET_SWEEP_BLOCK"
	TON_TESTNET_CACHE_BLOCK         = "TON_TESTNET_CACHE_BLOCK"
	TON_TESTNET_PENDING_BLOCK       = "TON_TESTNET_PENDING_BLOCK"
)

var (
	XRP_PUBLIC_KEY          = "XRP_PUBLIC_KEY"
	XRP_PENDING_TRANSACTION = "XRP_PENDING_TRANSACTION"
	XRP_LATEST_BLOCK        = "XRP_LATEST_BLOCK"
	XRP_SWEEP_BLOCK         = "XRP_SWEEP_BLOCK"
	XRP_CACHE_BLOCK         = "XRP_CACHE_BLOCK"
	XRP_PENDING_BLOCK       = "XRP_PENDING_BLOCK"
)

var (
	XRP_TESTNET_PUBLIC_KEY          = "XRP_TESTNET_PUBLIC_KEY"
	XRP_TESTNET_PENDING_TRANSACTION = "XRP_TESTNET_PENDING_TRANSACTION"
	XRP_TESTNET_LATEST_BLOCK        = "XRP_TESTNET_LATEST_BLOCK"
	XRP_TESTNET_SWEEP_BLOCK         = "XRP_TESTNET_SWEEP_BLOCK"
	XRP_TESTNET_CACHE_BLOCK         = "XRP_TESTNET_CACHE_BLOCK"
	XRP_TESTNET_PENDING_BLOCK       = "XRP_TESTNET_PENDING_BLOCK"
)

var (
	BCH_PUBLIC_KEY          = "BCH_PUBLIC_KEY"
	BCH_PENDING_TRANSACTION = "BCH_PENDING_TRANSACTION"
	BCH_LATEST_BLOCK        = "BCH_LATEST_BLOCK"
	BCH_SWEEP_BLOCK         = "BCH_SWEEP_BLOCK"
	BCH_CACHE_BLOCK         = "BCH_CACHE_BLOCK"
	BCH_PENDING_BLOCK       = "BCH_PENDING_BLOCK"
)

var (
	BCH_TESTNET_PUBLIC_KEY          = "BCH_TESTNET_PUBLIC_KEY"
	BCH_TESTNET_PENDING_TRANSACTION = "BCH_TESTNET_PENDING_TRANSACTION"
	BCH_TESTNET_LATEST_BLOCK        = "BCH_TESTNET_LATEST_BLOCK"
	BCH_TESTNET_SWEEP_BLOCK         = "BCH_TESTNET_SWEEP_BLOCK"
	BCH_TESTNET_CACHE_BLOCK         = "BCH_TESTNET_CACHE_BLOCK"
	BCH_TESTNET_PENDING_BLOCK       = "BCH_TESTNET_PENDING_BLOCK"
)

var (
	POL_PUBLIC_KEY          = "POL_PUBLIC_KEY"
	POL_PENDING_TRANSACTION = "POL_PENDING_TRANSACTION"
	POL_LATEST_BLOCK        = "POL_LATEST_BLOCK"
	POL_SWEEP_BLOCK         = "POL_SWEEP_BLOCK"
	POL_CACHE_BLOCK         = "POL_CACHE_BLOCK"
	POL_PENDING_BLOCK       = "POL_PENDING_BLOCK"
)

var (
	POL_TESTNET_PUBLIC_KEY          = "POL_TESTNET_PUBLIC_KEY"
	POL_TESTNET_PENDING_TRANSACTION = "POL_TESTNET_PENDING_TRANSACTION"
	POL_TESTNET_LATEST_BLOCK        = "POL_TESTNET_LATEST_BLOCK"
	POL_TESTNET_SWEEP_BLOCK         = "POL_TESTNET_SWEEP_BLOCK"
	POL_TESTNET_CACHE_BLOCK         = "POL_TESTNET_CACHE_BLOCK"
	POL_TESTNET_PENDING_BLOCK       = "POL_TESTNET_PENDING_BLOCK"
)

var (
	AVAX_PUBLIC_KEY          = "AVAX_PUBLIC_KEY"
	AVAX_PENDING_TRANSACTION = "AVAX_PENDING_TRANSACTION"
	AVAX_LATEST_BLOCK        = "AVAX_LATEST_BLOCK"
	AVAX_SWEEP_BLOCK         = "AVAX_SWEEP_BLOCK"
	AVAX_CACHE_BLOCK         = "AVAX_CACHE_BLOCK"
	AVAX_PENDING_BLOCK       = "AVAX_PENDING_BLOCK"
)

var (
	AVAX_TESTNET_PUBLIC_KEY          = "AVAX_TESTNET_PUBLIC_KEY"
	AVAX_TESTNET_PENDING_TRANSACTION = "AVAX_TESTNET_PENDING_TRANSACTION"
	AVAX_TESTNET_LATEST_BLOCK        = "AVAX_TESTNET_LATEST_BLOCK"
	AVAX_TESTNET_SWEEP_BLOCK         = "AVAX_TESTNET_SWEEP_BLOCK"
	AVAX_TESTNET_CACHE_BLOCK         = "AVAX_TESTNET_CACHE_BLOCK"
	AVAX_TESTNET_PENDING_BLOCK       = "AVAX_TESTNET_PENDING_BLOCK"
)

var (
	BASE_PUBLIC_KEY          = "BASE_PUBLIC_KEY"
	BASE_PENDING_TRANSACTION = "BASE_PENDING_TRANSACTION"
	BASE_LATEST_BLOCK        = "BASE_LATEST_BLOCK"
	BASE_SWEEP_BLOCK         = "BASE_SWEEP_BLOCK"
	BASE_CACHE_BLOCK         = "BASE_CACHE_BLOCK"
	BASE_PENDING_BLOCK       = "BASE_PENDING_BLOCK"
)

var (
	BASE_SEPOLIA_PUBLIC_KEY          = "BASE_SEPOLIA_PUBLIC_KEY"
	BASE_SEPOLIA_PENDING_TRANSACTION = "BASE_SEPOLIA_PENDING_TRANSACTION"
	BASE_SEPOLIA_LATEST_BLOCK        = "BASE_SEPOLIA_LATEST_BLOCK"
	BASE_SEPOLIA_SWEEP_BLOCK         = "BASE_SEPOLIA_SWEEP_BLOCK"
	BASE_SEPOLIA_CACHE_BLOCK         = "BASE_SEPOLIA_CACHE_BLOCK"
	BASE_SEPOLIA_PENDING_BLOCK       = "BASE_SEPOLIA_PENDING_BLOCK"
)

var (
	WS_NOTIFICATION    = "WS_NOTIFICATION"
	DAILY_REPORT_ERROR = "DAILY_REPORT_ERROR"
)

var AllPendingBlock = []string{
	ETH_PENDING_BLOCK,
	ETH_SEPOLIA_PENDING_BLOCK,
	BTC_PENDING_BLOCK,
	BTC_TESTNET_PENDING_BLOCK,
	TRON_PENDING_BLOCK,
	TRON_NILE_PENDING_BLOCK,
	BSC_PENDING_BLOCK,
	BSC_TESTNET_PENDING_BLOCK,
	ARBITRUM_ONE_PENDING_BLOCK,
	ARBITRUM_NOVA_PENDING_BLOCK,
	ARBITRUM_SEPOLIA_PENDING_BLOCK,
	LTC_PENDING_BLOCK,
	LTC_TESTNET_PENDING_BLOCK,
	OP_PENDING_BLOCK,
	OP_SEPOLIA_PENDING_BLOCK,
	SOL_PENDING_BLOCK,
	SOL_DEVNET_PENDING_BLOCK,
	TON_PENDING_BLOCK,
	TON_TESTNET_PENDING_BLOCK,
	XRP_PENDING_BLOCK,
	XRP_TESTNET_PENDING_BLOCK,
	BCH_PENDING_BLOCK,
	BCH_TESTNET_PENDING_BLOCK,
	POL_PENDING_BLOCK,
	POL_TESTNET_PENDING_BLOCK,
	AVAX_PENDING_BLOCK,
	AVAX_TESTNET_PENDING_BLOCK,
	BASE_PENDING_BLOCK,
	BASE_SEPOLIA_PENDING_BLOCK,
}

var AllPendingTx = []string{
	ETH_PENDING_TRANSACTION,
	ETH_SEPOLIA_PENDING_TRANSACTION,
	BTC_PENDING_TRANSACTION,
	BTC_TESTNET_PENDING_TRANSACTION,
	TRON_PENDING_TRANSACTION,
	TRON_NILE_PENDING_TRANSACTION,
	BSC_PENDING_TRANSACTION,
	BSC_TESTNET_PENDING_TRANSACTION,
	ARBITRUM_ONE_PENDING_TRANSACTION,
	ARBITRUM_NOVA_PENDING_TRANSACTION,
	ARBITRUM_SEPOLIA_PENDING_TRANSACTION,
	LTC_PENDING_TRANSACTION,
	LTC_TESTNET_PENDING_TRANSACTION,
	OP_PENDING_TRANSACTION,
	OP_SEPOLIA_PENDING_TRANSACTION,
	SOL_PENDING_TRANSACTION,
	SOL_DEVNET_PENDING_TRANSACTION,
	TON_PENDING_TRANSACTION,
	TON_TESTNET_PENDING_TRANSACTION,
	XRP_PENDING_TRANSACTION,
	XRP_TESTNET_PENDING_TRANSACTION,
	BCH_PENDING_TRANSACTION,
	BCH_TESTNET_PENDING_TRANSACTION,
	POL_PENDING_TRANSACTION,
	POL_TESTNET_PENDING_TRANSACTION,
	AVAX_PENDING_TRANSACTION,
	AVAX_TESTNET_PENDING_TRANSACTION,
	BASE_PENDING_TRANSACTION,
	BASE_SEPOLIA_PENDING_TRANSACTION,
}
